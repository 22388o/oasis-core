syntax = "proto3";

package client;
option go_package = "github.com/oasislabs/ekiden/go/grpc/client";

service Runtime {
    // Submit a transaction to leader.
    rpc SubmitTx (SubmitTxRequest) returns (SubmitTxResponse) {}
    // Wait for the node to finish syncing.
    rpc WaitSync (WaitSyncRequest) returns (WaitSyncResponse) {}
    // Check if the node is finished syncing.
    rpc IsSynced (IsSyncedRequest) returns (IsSyncedResponse) {}
    // Subscribe to roothash blocks.
    rpc WatchBlocks (WatchBlocksRequest) returns (stream WatchBlocksResponse) {}
    // Get roothash block at specific round.
    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {}
    // Query the block index of a given runtime.
    rpc QueryBlock(QueryBlockRequest) returns (QueryBlockResponse) {}
    // Query the transaction index of a given runtime.
    rpc QueryTxn(QueryTxnRequest) returns (QueryTxnResponse) {}
}

message SubmitTxRequest {
    // Encoded transaction.
    bytes data = 1;
    // Runtime identifier.
    bytes runtime_id = 2;
}

message SubmitTxResponse {
	bytes result = 1;
}

message WaitSyncRequest {}

message WaitSyncResponse {}

message IsSyncedRequest {}

message IsSyncedResponse {
	// True if the node finished the initial sync.
	bool synced = 1;
}

message WatchBlocksRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
}

message WatchBlocksResponse {
    // A CBOR-serialized block.
    bytes block = 1;
}

message GetBlockRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Round.
    uint64 round = 2;
}

message GetBlockResponse {
    // A CBOR-serialized block.
    bytes block = 1;
}

message QueryBlockRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Tag key.
    bytes key = 2;
    // Tag value.
    bytes value = 3;
}

message QueryBlockResponse {
    // A CBOR-serialized block.
    bytes block = 1;
}

message QueryTxnRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Tag key.
    bytes key = 2;
    // Tag value.
    bytes value = 3;
}

message QueryTxnResponse {
    // A CBOR-serialized block.
    bytes block = 1;
    // Transaction index.
    uint32 txn_index = 2;
    // Transaction input.
    bytes input = 3;
    // Transaction output.
    bytes output = 4;
}
