syntax = "proto3";

package client;
option go_package = "github.com/oasislabs/oasis-core/go/grpc/client";

service Runtime {
    // Submit a transaction to leader.
    rpc SubmitTx (SubmitTxRequest) returns (SubmitTxResponse) {}
    // Wait for consensus to reach an epoch.
    rpc WaitEpoch (WaitEpochRequest) returns (WaitEpochResponse) {}
    // Subscribe to roothash blocks.
    rpc WatchBlocks (WatchBlocksRequest) returns (stream WatchBlocksResponse) {}
    // Get roothash block at specific round.
    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {}
    // Get transaction at specific round and index.
    rpc GetTxn (GetTxnRequest) returns (GetTxnResponse) {}
    // Get transaction at specific block hash and index.
    rpc GetTxnByBlockHash (GetTxnByBlockHashRequest) returns (GetTxnByBlockHashResponse) {}
    // Get transactions at specific transaction root.
    rpc GetTransactions (GetTransactionsRequest) returns (GetTransactionsResponse) {}
    // Query the block index of a given runtime.
    rpc QueryBlock(QueryBlockRequest) returns (QueryBlockResponse) {}
    // Query the transaction index of a given runtime.
    rpc QueryTxn(QueryTxnRequest) returns (QueryTxnResponse) {}
    // Query the transaction index of a given runtime with a complex
    // query and returns multiple results.
    rpc QueryTxns(QueryTxnsRequest) returns (QueryTxnsResponse) {}
    // Wait for a block to be indexed by the indexer.
    rpc WaitBlockIndexed(WaitBlockIndexedRequest) returns (WaitBlockIndexedResponse) {}
}

message SubmitTxRequest {
    // Encoded transaction.
    bytes data = 1;
    // Runtime identifier.
    bytes runtime_id = 2;
}

message SubmitTxResponse {
	bytes result = 1;
}

message WaitEpochRequest {
    // Epoch to wait for.
    uint64 epoch = 1;
}

message WaitEpochResponse {}

message WatchBlocksRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
}

message WatchBlocksResponse {
    // A CBOR-serialized block.
    bytes block = 1;
    // Block header hash.
    bytes block_hash = 2;
}

message GetBlockRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Round.
    uint64 round = 2;
}

message GetBlockResponse {
    // A CBOR-serialized block.
    bytes block = 1;
    // Block header hash.
    bytes block_hash = 2;
}

message GetTxnRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Round.
    uint64 round = 2;
    // Transaction index.
    uint32 index = 3;
}

message GetTxnResponse {
    // A CBOR-serialized TxnResult.
    bytes result = 1;
}

message GetTxnByBlockHashRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Block hash.
    bytes block_hash = 2;
    // Transaction index.
    uint32 index = 3;
}

message GetTxnByBlockHashResponse {
    // A CBOR-serialized TxnResult.
    bytes result = 1;
}

message GetTransactionsRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Round.
    uint64 round = 2;
    // Transaction root.
    bytes root = 3;
}

message GetTransactionsResponse {
    // Raw transactions.
    repeated bytes txns = 1;
}

message QueryBlockRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Block hash.
    bytes block_hash = 2;
}

message QueryBlockResponse {
    // A CBOR-serialized block.
    bytes block = 1;
}

message QueryTxnRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Tag key.
    bytes key = 2;
    // Tag value.
    bytes value = 3;
}

message QueryTxnResponse {
    // A CBOR-serialized TxnResult.
    bytes result = 1;
}

message QueryTxnsRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // A CBOR-serialized query.
    bytes query = 2;
}

message QueryTxnsResponse {
    // CBOR-serialized results.
    bytes results = 1;
}

message WaitBlockIndexedRequest {
    // Runtime identifier.
    bytes runtime_id = 1;
    // Round.
    uint64 round = 2;
}

message WaitBlockIndexedResponse {}
