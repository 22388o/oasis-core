syntax = "proto3";

package storage;
option go_package = "github.com/oasislabs/ekiden/go/grpc/storage";

service Storage {
    // MKVS
    rpc Apply(ApplyRequest) returns (ApplyResponse) {}
    rpc ApplyBatch(ApplyBatchRequest) returns (ApplyBatchResponse) {}
    rpc GetSubtree(GetSubtreeRequest) returns (GetSubtreeResponse) {}
    rpc GetPath(GetPathRequest) returns (GetPathResponse) {}
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {}
    rpc GetDiff(GetDiffRequest) returns (stream GetDiffResponse) {}
}

message LogEntry {
    bytes key = 1;
    bytes value = 2;
}

message ApplyRequest {
    bytes root = 1;
    bytes expected_new_root = 2;
    repeated LogEntry log = 3;
}

message ApplyResponse {
    // A list of Receipts, serialized to CBOR.
    bytes receipts = 1;
}

message ApplyOp {
    bytes root = 1;
    bytes expected_new_root = 2;
    repeated LogEntry log = 3;
}

message ApplyBatchRequest {
    repeated ApplyOp ops = 1;
}

message ApplyBatchResponse {
    // A list of Receipts, serialized to CBOR.
    bytes receipts = 1;
}

message NodeID {
    bytes path = 1;
    uint32 depth = 2;  // Actually uint8, but protobufs don't have that :/
}

message GetSubtreeRequest {
    bytes root = 1;
    NodeID id = 2;
    uint32 max_depth = 3;  // uint8
}

message GetSubtreeResponse {
    bytes subtree = 1;  // serialized to binary
}

message GetPathRequest {
    bytes root = 1;
    bytes key = 2;
    uint32 start_depth = 3;  // uint8
}

message GetPathResponse {
    bytes subtree = 1;  // serialized to binary
}

message GetNodeRequest {
    bytes root = 1;
    NodeID id = 2;
}

message GetNodeResponse {
    bytes node = 1;  // serialized to binary
}

message GetDiffRequest {
    message SyncOptions {
        bytes offset_key = 1;
        uint64 limit = 2;
    }

    bytes start_hash = 1;
    bytes end_hash = 2;
    SyncOptions opts = 3;
}

message GetDiffResponse {
    bool final = 1;
    repeated LogEntry log = 2;
}
