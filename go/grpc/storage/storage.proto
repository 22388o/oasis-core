syntax = "proto3";

package storage;
option go_package = "github.com/oasislabs/ekiden/go/grpc/storage";

service StorageWorker {
    rpc GetLastSyncedRound(GetLastSyncedRoundRequest) returns (GetLastSyncedRoundResponse) {}
}

message GetLastSyncedRoundRequest {
    bytes runtime_id = 1;
}

message GetLastSyncedRoundResponse {
    uint64 round = 1;
    bytes io_root = 2;
    bytes state_root = 3;
}

service Storage {
    // MKVS
    rpc Apply(ApplyRequest) returns (ApplyResponse) {}
    rpc ApplyBatch(ApplyBatchRequest) returns (ApplyBatchResponse) {}
    rpc Merge(MergeRequest) returns (MergeResponse) {}
    rpc MergeBatch(MergeBatchRequest) returns (MergeBatchResponse) {}
    rpc GetSubtree(GetSubtreeRequest) returns (GetSubtreeResponse) {}
    rpc GetPath(GetPathRequest) returns (GetPathResponse) {}
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {}
    rpc GetDiff(GetDiffRequest) returns (stream WriteLogResponse) {}
    rpc GetCheckpoint(GetCheckpointRequest) returns (stream WriteLogResponse) {}
}

message LogEntry {
    bytes key = 1;
    bytes value = 2;
}

message ApplyRequest {
    bytes namespace = 1;
    uint64 src_round = 2;
    bytes src_root = 3;
    uint64 dst_round = 4;
    bytes dst_root = 5;
    repeated LogEntry log = 6;
}

message ApplyResponse {
    // A list of Receipts, serialized to CBOR.
    bytes receipts = 1;
}

message ApplyOp {
    uint64 src_round = 1;
    bytes src_root = 2;
    bytes dst_root = 3;
    repeated LogEntry log = 4;
}

message ApplyBatchRequest {
    bytes namespace = 1;
    uint64 dst_round = 2;
    repeated ApplyOp ops = 3;
}

message ApplyBatchResponse {
    // A list of Receipts, serialized to CBOR.
    bytes receipts = 1;
}

message MergeRequest {
    bytes namespace = 1;
    uint64 round = 2;
    bytes base = 3;
    repeated bytes others = 4;
}

message MergeResponse {
    // A list of Receipts, serialized to CBOR.
    bytes receipts = 1;
}

message MergeOp {
    bytes base = 1;
    repeated bytes others = 2;
}

message MergeBatchRequest {
    bytes namespace = 1;
    uint64 round = 2;
    repeated MergeOp ops = 3;
}

message MergeBatchResponse {
    // A list of Receipts, serialized to CBOR.
    bytes receipts = 1;
}

message NodeID {
    bytes path = 1;
    // bit_depth is actually Depth (uint16), but protobufs don't have that :/
    uint32 bit_depth = 2;
}

message GetSubtreeRequest {
    bytes root = 1;
    NodeID id = 2;
    uint32 max_depth = 3;  // Depth
}

message GetSubtreeResponse {
    bytes subtree = 1;  // serialized to binary
}

message GetPathRequest {
    bytes root = 1;
    NodeID id = 2;
    bytes key = 3;
}

message GetPathResponse {
    bytes subtree = 1;  // serialized to binary
}

message GetNodeRequest {
    bytes root = 1;
    NodeID id = 2;
}

message GetNodeResponse {
    bytes node = 1;  // serialized to binary
}

// SyncOptions are shared options for GetDiff and GetCheckpoint services.
message SyncOptions {
    bytes offset_key = 1;
    uint64 limit = 2;
}

// WriteLogResponse is shared response type for GetDiff and GetCheckpoint services.
message WriteLogResponse {
    bool final = 1;
    repeated LogEntry log = 2;
}

message GetDiffRequest {
    bytes start_root = 1;
    bytes end_root = 2;
    SyncOptions opts = 3;
}

message GetCheckpointRequest {
    bytes root = 1;
    SyncOptions opts = 2;
}
