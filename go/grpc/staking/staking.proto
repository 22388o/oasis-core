syntax = "proto3";

package staking;
option go_package = "github.com/oasislabs/ekiden/go/grpc/staking";

service Staking {
	// Calls that query.
	rpc GetName(GetNameRequest) returns (GetNameResponse) {}
	rpc GetSymbol(GetSymbolRequest) returns (GetSymbolResponse) {}
	rpc GetTotalSupply(GetTotalSupplyRequest) returns (GetTotalSupplyResponse) {}
	rpc GetCommonPool(GetCommonPoolRequest) returns (GetCommonPoolResponse) {}
	rpc GetThreshold(GetThresholdRequest) returns (GetThresholdResponse) {}
	rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse) {} // TODO: Stream this?
	rpc GetAccountInfo(GetAccountInfoRequest) returns (GetAccountInfoResponse) {}

	// Calls that mutate state.
	rpc Transfer(TransferRequest) returns (TransferResponse) {}
	rpc Burn(BurnRequest) returns (BurnResponse) {}
	rpc AddEscrow(AddEscrowRequest) returns (AddEscrowResponse) {}
	rpc ReclaimEscrow(ReclaimEscrowRequest) returns (ReclaimEscrowResponse) {}

	// Calls that watch events.
	rpc WatchTransfers (WatchTransfersRequest) returns (stream WatchTransfersResponse) {}
	rpc WatchBurns (WatchBurnsRequest) returns (stream WatchBurnsResponse) {}
	rpc WatchEscrows (WatchEscrowsRequest) returns (stream WatchEscrowsResponse) {}
}

message GetNameRequest {}

message GetNameResponse {
	string name = 1;
}

message GetSymbolRequest {}

message GetSymbolResponse {
	string symbol = 1;
}

message GetTotalSupplyRequest {}

message GetTotalSupplyResponse {
	bytes total_supply = 1;
}

message GetCommonPoolRequest {}

message GetCommonPoolResponse {
	bytes common_pool = 1;
}

message GetThresholdRequest {
	enum ThresholdKind {
		ENTITY = 0;
		VALIDATOR = 1;
		COMPUTE = 2;
		STORAGE = 3;
	}
	ThresholdKind threshold_kind = 1;
}

message GetThresholdResponse {
	bytes threshold = 1;
}

message GetAccountsRequest {}

message GetAccountsResponse {
	repeated bytes ids = 1;
}

message GetAccountInfoRequest {
	bytes id = 1;
}

message GetAccountInfoResponse {
	bytes general_balance = 1;
	bytes escrow_balance = 2;
	uint64 debond_start_time = 3;
	uint64 nonce = 4;
}

message TransferRequest {
	bytes signed_transfer = 1;
}

message TransferResponse {}

message BurnRequest {
	bytes signed_burn = 1;
}

message BurnResponse {}

message AddEscrowRequest {
	bytes signed_escrow = 1;
}

message AddEscrowResponse {}

message ReclaimEscrowRequest {
	bytes signed_reclaim = 1;
}

message ReclaimEscrowResponse {}

message WatchTransfersRequest {}

message WatchTransfersResponse {
	bytes event = 1;
}

message WatchBurnsRequest {}

message WatchBurnsResponse {
	bytes event = 1;
}

message WatchEscrowsRequest {}

message WatchEscrowsResponse {
	enum EventType {
		ADD = 0;
		TAKE = 1;
		RECLAIM = 2;
	}
	EventType event_type = 1;
	bytes event = 2;
}
