//! RPC client generating macros.

/// Create a RPC client for a given API.
///
/// # Examples
///
/// This macro should be invoked using a concrete API generated by `runtime_api` as
/// follows:
/// ```rust,ignore
/// with_api! {
///     create_rpc_api_client!(MyClient, api);
/// }
/// ```
///
/// In this example, the generated client type will be called `MyClient`. The API
/// definitions will passed as the last argument as defined by the `api` token.
#[macro_export]
macro_rules! create_rpc_api_client {
    (
        $name:ident,

        $(
            pub fn $method_name: ident ( $request_type: ty ) -> $response_type: ty ;
        )*
    ) => {
        pub struct $name {
            rpc_client: $crate::RpcClient,
        }

        impl $name {
            /// Create new client instance.
            pub fn new(rpc_client: $crate::RpcClient) -> Self {
                Self {
                    rpc_client,
                }
            }

            // Generate methods.
            $(
                pub fn $method_name(
                    &self,
                    ctx: ::io_context::Context,
                    arguments: $request_type
                ) -> $crate::BoxFuture<$response_type> {
                    self.rpc_client.call(ctx, stringify!($method_name), arguments)
                }
            )*
        }
    };
}
