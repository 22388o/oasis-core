/// Registers defined RPC methods into the RPC dispatcher.
///
/// # Examples
///
/// This macro should be invoked using a concrete API generated by `runtime_api`
/// as follows:
/// ```rust,ignore
/// with_api! {
///     register_runtime_rpc_methods!(rpc_dispatcher, api);
/// }
/// ```
#[macro_export]
macro_rules! register_runtime_rpc_methods {
    (
        $rpc_dispatcher:ident,
        $(
            pub fn $method_name:ident ( $arguments_type:ty ) -> $output_type:ty ;
        )*
    ) => {
        $(
            $rpc_dispatcher.add_method(
                $crate::enclave_rpc::dispatcher::Method::new(
                    $crate::enclave_rpc::dispatcher::MethodDescriptor {
                        name: stringify!($method_name).to_owned(),
                    },
                    |args: &$arguments_type,
                     ctx: &mut $crate::enclave_rpc::context::Context|
                        -> ::anyhow::Result<$output_type> {
                        $method_name(args, ctx)
                    },
                ),
                false,
            );
        )*
    }
}
