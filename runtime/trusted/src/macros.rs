/// Registers defined runtime methods into the enclave runtime dispatcher.
///
/// # Examples
///
/// This macro should be invoked using a concrete API generated by `runtime_api` as
/// follows:
/// ```rust,ignore
/// with_api! {
///     create_runtime!(api);
/// }
/// ```
#[macro_export]
macro_rules! create_runtime {
    (
        $(
            pub fn $method_name:ident ( $arguments_type:ty ) -> $output_type:ty ;
        )*
    ) => {
        #[cfg(target_env = "sgx")]
        global_ctors_object! {
            ENCLAVE_RUNTIME_INIT, enclave_runtime_init = {
                use ekiden_core::error::Result;
                use ekiden_trusted::runtime::dispatcher::{RuntimeCallContext,
                                                          RuntimeMethod,
                                                          RuntimeMethodDescriptor,
                                                          Dispatcher};

                // Register generated methods using the dispatcher.
                let mut dispatcher = Dispatcher::get();
                $(
                    dispatcher.add_method(
                        RuntimeMethod::new(
                            RuntimeMethodDescriptor {
                                name: stringify!($method_name).to_owned(),
                            },
                            |args: &$arguments_type,
                             ctx: &mut RuntimeCallContext| -> Result<$output_type> {
                                $method_name(args, ctx)
                            },
                        )
                    );
                )*
            }
        }
    }
}

/// Configure the runtime dispatch batch handler.
#[macro_export]
macro_rules! configure_runtime_dispatch_batch_handler {
    ($handler:ident) => {
        #[cfg(target_env = "sgx")]
        global_ctors_object! {
            ENCLAVE_RUNTIME_BATCH_HANDLER_INIT, enclave_batch_handler_init = {
                use ekiden_trusted::runtime::dispatcher::Dispatcher;

                let mut dispatcher = Dispatcher::get();
                dispatcher.set_batch_handler($handler);
            }
        }
    };
}
