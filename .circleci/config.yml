version: 2
jobs:
  build:
    docker:
      - image: ekiden/testing:0.1.0-alpha.5
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout

      # Cargo tests. Some tests are excluded as they currently don't compile.
      # Heuristic glob to detect what test binaries that cargo builds.
      # If that gets too janky, try `cargo test --message-format=json`
      # (see
      # https://github.com/rust-lang/cargo/issues/1924#issuecomment-289770287).
      - run: |
          cargo test --all \
            --exclude ekiden-untrusted \
            --exclude ekiden-enclave-untrusted \
            --exclude ekiden-rpc-untrusted \
            --exclude ekiden-db-untrusted \
            --exclude ekiden-contract-untrusted \
            --exclude token \
            --no-run
          cd target/debug
          mkdir ../cov
          for bin in $(ls | grep '^\w\+-[0-9a-f]\{16\}$'); do
            mkdir ../cov/$bin
            kcov \
              --exclude-pattern=$HOME/.cargo,/usr/lib \
              --verify \
              ../cov/$bin \
              ./$bin \
              --test-threads 1
          done
      # Upload coverage info.
      - run: codecov

      # Cargo benchmarks. We first fetch the latest benchmark results from master and then
      # compare against them.
      - run: |
          set +e
          set +o pipefail
          wget -q -O - "https://circleci.com/api/v1.1/project/github/oasislabs/ekiden/latest/artifacts/?branch=master&circle-token=${CIRCLE_TOKEN}" | grep -o 'https://[^"]*' | xargs -P4 -I % wget -q -O /tmp/benchmarks-master.json %?circle-token=${CIRCLE_TOKEN}
      - run: |
          ./scripts/benchmark.py \
              ekiden-rpc-trusted \
              ekiden-db-trusted \
              --output /tmp/benchmarks.json \
              --compare-to /tmp/benchmarks-master.json
      - store_artifacts:
          path: /tmp/benchmarks.json
          destination: benchmarks

      # Install ekiden-tools.
      - run: cargo install --force --path tools ekiden-tools
      # Build key manager contract.
      - run:
          command: cargo ekiden build-contract
          working_directory: contracts/key-manager
      # Build token contract.
      - run:
          command: cargo ekiden build-contract --output-identity
          working_directory: contracts/token
      # Run token contract tests.
      - run: cargo test -p token
      # Ensure everything is built. This needs to be after the key manager contract is built.
      - run: cargo build
      # Check style. This needs to be after everything is built.
      - run: cargo fmt -- --write-mode=diff

      # Contract end-to-end tests.

      # Start dummy node.
      - run:
          command: |
            ./target/debug/ekiden-node-dummy --time-source mockrpc
          background: true
      # Start key manager compute node.
      - run:
          command: |
            ./target/debug/ekiden-compute \
              -p 9003 \
              --disable-key-manager \
              --no-persist-identity \
              --max-batch-size 1 \
              target/contract/ekiden-key-manager.so
          background: true
      # Start token compute nodes.
      - run:
          command: |
            ./target/debug/ekiden-compute \
              --no-persist-identity \
              --max-batch-size 1 \
              --compute-replicas 3 \
              --port 10001 \
              target/contract/token.so
          background: true
      - run:
          command: |
            sleep 1
            ./target/debug/ekiden-compute \
              --no-persist-identity \
              --max-batch-size 1 \
              --compute-replicas 3 \
              --port 10002 \
              target/contract/token.so
          background: true
      - run:
          command: |
            sleep 2
            ./target/debug/ekiden-compute \
              --no-persist-identity \
              --max-batch-size 1 \
              --compute-replicas 3 \
              --port 10003 \
              target/contract/token.so
          background: true
      # Start token client.
      - run: |
          # Sleep so everything gets ready.
          sleep 10

          # Advance epoch to elect a new committee.
          ./target/debug/ekiden-node-dummy-controller set-epoch --epoch 1

          # Sleep some more.
          sleep 5

          # Run the client.
          ./target/debug/token-client --mr-enclave $(cat target/contract/token.mrenclave)

  deploy:
    docker:
      - image: ekiden/testing:0.1.0-alpha.5
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      - setup_remote_docker

      # Build deployment image.
      - run: BUILD_IMAGES_NO_ENTER=1 ./docker/deployment/build-images.sh
      # Push deployment image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          docker push oasislabs/testnet:latest
      # Update testnet.
      # https://stackoverflow.com/a/33511811/1864688
      - run: |
          REPO_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' oasislabs/testnet:latest)
          mkdir -p ~/.kube
          echo "$KUBECONFIG_CONTENT_BASE64" | base64 -di >~/.kube/config
          kubectl set image deployments/ekiden-token-node-dummy ekiden-node-dummy=$REPO_DIGEST
          kubectl set image deployments/ekiden-token-key-manager ekiden-compute=$REPO_DIGEST
          kubectl set image deployments/ekiden-token ekiden-compute=$REPO_DIGEST

workflows:
  version: 2
  build:
    jobs:
      - build
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - build
experimental:
  notify:
    branches:
      only:
        - master
