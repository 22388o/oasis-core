# `copper` is chosen as a random word for use as a key for labels that
# aren't naturally structured as key-value pairs.

kind: Service
apiVersion: v1
metadata:
  name: ekiden-token-consensus
spec:
  ports:
    - name: consensus-grpc
      port: 9002
  selector:
    copper: ekiden-token-consensus
  # type: ClusterIP
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: ekiden-token-consensus
spec:
  selector:
    matchLabels:
      copper: ekiden-token-consensus
  # replicas: 1
  template:
    metadata:
      labels:
        copper: ekiden-token-consensus
    spec:
      containers:
        - name: ekiden-consensus
          image: docker.io/oasislabs/testnet:latest
          command:
            - ekiden-consensus
          args:
            - --no-tendermint
---
kind: Service
apiVersion: v1
metadata:
  name: ekiden-token-key-manager
spec:
  ports:
    - name: contract-grpc
      port: 9003
  selector:
    copper: ekiden-token-key-manager
  # type: ClusterIP
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: ekiden-token-key-manager
spec:
  selector:
    matchLabels:
      copper: ekiden-token-key-manager
  # replicas: 1
  template:
    metadata:
      labels:
        copper: ekiden-token-key-manager
    spec:
      containers:
        - name: ekiden-compute
          image: docker.io/oasislabs/testnet:latest
          command:
            - ekiden-compute
          args:
            - --port
            - "9003"
            - --disable-key-manager
            - --no-persist-identity
            - --max-batch-size
            - "1"
            - ekiden/lib/ekiden-key-manager.so
---
kind: Service
apiVersion: v1
metadata:
  name: ekiden-token
spec:
  ports:
    - name: contract-grpc
      port: 9001
  selector:
    copper: ekiden-token
  # Change this to make the network public.
  # type: ClusterIP
---
# Should we go stateful and save the identity?
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: ekiden-token
spec:
  selector:
    matchLabels:
      copper: ekiden-token
  # replicas: 1
  template:
    metadata:
      labels:
        copper: ekiden-token
    spec:
      containers:
        - name: ekiden-compute
          image: docker.io/oasislabs/testnet:latest
          command:
            - ekiden-compute
          args:
            - --no-persist-identity
            - --consensus-host
            - $(EKIDEN_TOKEN_CONSENSUS_SERVICE_HOST)
            - --consensus-port
            - $(EKIDEN_TOKEN_CONSENSUS_SERVICE_PORT_CONSENSUS_GRPC)
            - --key-manager-host
            - $(EKIDEN_TOKEN_KEY_MANAGER_SERVICE_HOST)
            - --key-manager-port
            - $(EKIDEN_TOKEN_KEY_MANAGER_SERVICE_PORT_CONTRACT_GRPC)
            - ekiden/lib/token.so
---
# Prometheus Setup
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
- kind: ServiceAccount
  name: prometheus-operator
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus-operator
rules:
- apiGroups:
  - extensions
  resources:
  - thirdpartyresources
  verbs:
  - "*"
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - "*"
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - prometheuses
  - prometheuses/finalizers
  - alertmanagers/finalizers
  - servicemonitors
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "delete"]
- apiGroups: [""]
  resources:
  - services
  - endpoints
  verbs: ["get", "create", "update"]
- apiGroups: [""]
  resources:
  - nodes
  - namespaces
  verbs: ["list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-operator
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    k8s-app: prometheus-operator
  name: prometheus-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: prometheus-operator
  template:
    metadata:
      labels:
        k8s-app: prometheus-operator
    spec:
      containers:
      - args:
        - --kubelet-service=kube-system/kubelet
        - --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1
        image: quay.io/coreos/prometheus-operator:v0.19.0
        name: prometheus-operator
        ports:
        - containerPort: 8080
          name: http
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-operator