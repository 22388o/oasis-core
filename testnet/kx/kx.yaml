# `copper` is chosen as a random word for use as a key for labels that
# aren't naturally structured as key-value pairs.

kind: Service
apiVersion: v1
metadata:
  name: ekiden-token-node-dummy
spec:
  ports:
    - name: dummy-grpc
      port: 42261
  selector:
    copper: ekiden-token-node-dummy
  # type: ClusterIP
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: ekiden-token-node-dummy
  labels:
    app: ekiden
spec:
  selector:
    matchLabels:
      copper: ekiden-token-node-dummy
  # replicas: 1
  template:
    metadata:
      labels:
        copper: ekiden-token-node-dummy
        app: ekiden
    spec:
      containers:
        - name: ekiden-node-dummy
          image: docker.io/oasislabs/testnet:latest
          command:
            - ekiden-node-dummy
          args:
            - --time-source
            - mock
            - --mock-epoch-interval
            - "60"
            - --storage-backend
            - dummy
---
kind: Service
apiVersion: v1
metadata:
  name: ekiden-token
spec:
  ports:
    - name: contract-grpc
      port: 9001
  selector:
    copper: ekiden-token
  # Change this to make the network public.
  # type: ClusterIP
---
# Should we go stateful and save the identity?
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: ekiden-token
  labels:
    app: ekiden
spec:
  selector:
    matchLabels:
      copper: ekiden-token
  replicas: 2
  template:
    metadata:
      labels:
        copper: ekiden-token
        app: ekiden
    spec:
      containers:
        - name: ekiden-compute
          image: docker.io/oasislabs/testnet:latest
          env:
            - name: LD_LIBRARY_PATH
              value: /opt/intel/sgxsdk/lib64
          command:
            - ekiden-compute
          args:
            - --no-persist-identity
            - --metrics-addr
            - "0.0.0.0:3000"
            - --consensus-client-host
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_HOST)
            - --consensus-client-port
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_PORT_DUMMY_GRPC)
            - --contract-registry-client-host
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_HOST)
            - --contract-registry-client-port
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_PORT_DUMMY_GRPC)
            - --entity-registry-client-host
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_HOST)
            - --entity-registry-client-port
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_PORT_DUMMY_GRPC)
            - --scheduler-client-host
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_HOST)
            - --scheduler-client-port
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_PORT_DUMMY_GRPC)
            - --batch-storage
            - immediate_remote
            - --batch-storage-immediate-client-host
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_HOST)
            - --batch-storage-immediate-client-port
            - $(EKIDEN_TOKEN_NODE_DUMMY_SERVICE_PORT_DUMMY_GRPC)
            - --time-source-notifier
            - system
            - --web3-host
            - ws://$(PARITY_SERVICE_HOST):$(PARITY_SERVICE_PORT_PARITY_WS)
            - ekiden/lib/token.so
---
kind: Service
apiVersion: v1
metadata:
  name: ekiden-dashboard
  labels:
    app: ekiden-dashboard
spec:
  selector:
    app: ekiden
  ports:
    - name: metrics
      port: 3000
      # targetPort is set to match port [3000] automatically
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ekiden-dashboard
  namespace: monitoring
  labels:
    app: ekiden-dashboard
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app: ekiden-dashboard
  endpoints:
    - port: metrics
      interval: 5s
  namespaceSelector:
    matchNames:
      - default
